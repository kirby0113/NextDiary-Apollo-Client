"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type LoginResponse {
  access_token: String!
}

type Tag {
  id: ID!
  name: String!
  user_id: Float!
}

type MessageResponse {
  message: String
}

type Diary {
  id: ID!
  title: String!
  detail: String!
  created_at: DateTime!
  tags: [Tag!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Query {
  user: User!
  users: [User!]!
  tags: [Tag!]!
  getDiaries(getDiariesInput: GetDiariesInput!): [Diary!]!
  getDiary(id: Float!): Diary!
}

input GetDiariesInput {
  tag_id: Float
  order_asc: Boolean
}

type Mutation {
  login(loginUserInput: LoginUserInput!): LoginResponse!
  register(name: String!, email: String!, password: String!): LoginResponse!
  createUser(name: String!, email: String!, password: String!): User!
  createTag(name: String!): Tag!
  updateTag(id: Float!, name: String!): Tag!
  deleteTag(id: Float!): MessageResponse!
  createDiary(createDiaryInput: CreateDiaryInput!): Diary!
  updateDiary(updateDiaryInput: UpdateDiaryInput!): Diary!
  deleteDiary(id: Float!): MessageResponse!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateDiaryInput {
  title: ID!
  detail: String!
  tags: [InputTag!]!
}

input InputTag {
  id: ID!
  name: String!
  user_id: Float!
}

input UpdateDiaryInput {
  id: ID!
  title: String!
  detail: String!
  tags: [InputTag!]!
}
